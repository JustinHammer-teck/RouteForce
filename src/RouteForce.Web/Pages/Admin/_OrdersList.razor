@using RouteForce.Application.Common.DTOs
@using RouteForce.Core.Enums
@using RouteForce.Web.Pages.Components

<div id="order-list-container" class="container mx-auto p-4 max-w-7xl">
    <div class="flex justify-between items-center mb-6">
        <h1 class="text-3xl font-bold">Orders</h1>
        <button type="button"
                hx-get="/orders/register/form"
                hx-swap="innerHTML"
                hx-target="#admin-content"
                class="btn btn-primary">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
            </svg>
            Create Order
        </button>
    </div>

    @if (Orders.Any())
    {
        <div id="order-list" class="card bg-base-100 shadow-md">
            <div class="overflow-x-auto">
                <table class="table table-zebra">
                    <thead>
                        <tr>
                            <th>Tracking #</th>
                            <th>Product Ref</th>
                            <th>Receiver</th>
                            <th>Delivery Address</th>
                            <th>Status</th>
                            <th>Progress</th>
                            <th>Created</th>
                            <th>Est. Delivery</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var order in Orders)
                        {
                            <tr>
                                <td>
                                    <span class="font-mono font-semibold">@order.TrackingNumber</span>
                                </td>
                                <td>@order.ProductReferenceId</td>
                                <td>
                                    <div>
                                        <div class="font-semibold">@order.ReceiverName</div>
                                        <div class="text-sm opacity-70">@order.ReceiverEmail</div>
                                    </div>
                                </td>
                                <td class="max-w-xs truncate">
                                    <span title="@order.DeliveryAddress">@order.DeliveryAddress</span>
                                </td>
                                <td>
                                    <span class="badge @GetStatusBadgeClass(order.Status)">
                                        @order.Status
                                    </span>
                                </td>
                                <td>
                                    <div class="text-sm">
                                        <div>@order.CompletedCheckpoints / @order.TotalCheckpoints</div>
                                        @if (!string.IsNullOrEmpty(order.CurrentCheckpoint))
                                        {
                                            <div class="text-xs opacity-70">@order.CurrentCheckpoint</div>
                                        }
                                    </div>
                                </td>
                                <td>
                                    <span class="text-sm">@order.CreatedDate.ToString("MMM dd, yyyy")</span>
                                </td>
                                <td>
                                    @if (order.EstimatedDeliveryDate.HasValue)
                                    {
                                        <span class="text-sm">@order.EstimatedDeliveryDate.Value.ToString("MMM dd, yyyy")</span>
                                    }
                                    else
                                    {
                                        <span class="text-sm opacity-50">-</span>
                                    }
                                </td>
                                <td>
                                    @if (!string.IsNullOrEmpty(order.DeliveryToken))
                                    {
                                        <a href="/orders/update-checkpoint?token=@order.DeliveryToken"
                                           hx-boost="true"
                                           class="btn btn-sm btn-primary">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                            </svg>
                                            Update
                                        </a>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <_Pagination CurrentPage="@CurrentPage"
                     TotalPages="@TotalPages"
                     TotalCount="@TotalCount"
                     PageSize="@PageSize"
                     ItemName="orders" />
    }
    else
    {
        <div class="card bg-base-100 shadow-md">
            <div class="card-body text-center py-12">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 mx-auto opacity-30 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4" />
                </svg>
                <p class="text-lg opacity-70">No orders found</p>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public List<OrderListItemDto> Orders { get; set; } = new();
    [Parameter] public int TotalCount { get; set; }
    [Parameter] public int CurrentPage { get; set; }
    [Parameter] public int TotalPages { get; set; }
    [Parameter] public int PageSize { get; set; }

    private string GetStatusBadgeClass(OrderStatus status) => status switch
    {
        OrderStatus.Created => "badge-info",
        OrderStatus.Processing => "badge-primary",
        OrderStatus.InTransit => "badge-accent",
        OrderStatus.OutForDelivery => "badge-warning",
        OrderStatus.Delivered => "badge-success",
        OrderStatus.Failed => "badge-error",
        OrderStatus.Cancelled => "badge-ghost",
        OrderStatus.Returned => "badge-warning",
        _ => "badge-ghost"
    };
}