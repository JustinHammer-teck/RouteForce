// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RouteForce.Infrastructure.Persistent;

#nullable disable

namespace RouteForce.Infrastructure.Persistent.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("RouteForce.Core.Models.Business", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.ToTable("Businesses");
                });

            modelBuilder.Entity("RouteForce.Core.Models.Checkpoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CheckpointType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("DeliveryServiceTemplateId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<int?>("ManagedByBusinessId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequiresConfirmation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("CheckpointType");

                    b.HasIndex("DeliveryServiceTemplateId");

                    b.HasIndex("IsActive");

                    b.HasIndex("ManagedByBusinessId");

                    b.ToTable("Checkpoints");
                });

            modelBuilder.Entity("RouteForce.Core.Models.DeliveryAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("PersonalReceiverId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("PersonalReceiverId");

                    b.HasIndex("PersonalReceiverId", "IsDefault");

                    b.ToTable("DeliveryAddresses");
                });

            modelBuilder.Entity("RouteForce.Core.Models.DeliveryServiceTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("EstimatedDeliveryDays")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("ServiceCode")
                        .IsUnique();

                    b.ToTable("DeliveryServiceTemplate");
                });

            modelBuilder.Entity("RouteForce.Core.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("DeliveryMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RecipientEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("RecipientPhone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("WebhookConfirmationUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("OrderId");

                    b.HasIndex("Status");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("RouteForce.Core.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ActualDeliveryDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("BusinessId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("DeliveryCheckpointId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DeliveryServiceTemplateId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EstimatedDeliveryDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("PersonalReceiverId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductReferenceId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("SelectedDeliveryAddressId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("DeliveryCheckpointId");

                    b.HasIndex("DeliveryServiceTemplateId");

                    b.HasIndex("PersonalReceiverId");

                    b.HasIndex("SelectedDeliveryAddressId");

                    b.HasIndex("Status");

                    b.HasIndex("TrackingNumber")
                        .IsUnique();

                    b.HasIndex("BusinessId", "Status");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("RouteForce.Core.Models.PersonalReceiver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreatedByBusinessId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByBusinessId");

                    b.HasIndex("Email");

                    b.ToTable("PersonalReceivers");
                });

            modelBuilder.Entity("RouteForce.Core.Models.RouteCheckpoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ActualArrival")
                        .HasColumnType("TEXT");

                    b.Property<int>("CheckpointId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ConfirmationTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ConfirmedByTokenId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ExpectedArrival")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Pending");

                    b.HasKey("Id");

                    b.HasIndex("CheckpointId");

                    b.HasIndex("ConfirmedByTokenId");

                    b.HasIndex("OrderId");

                    b.HasIndex("Status");

                    b.HasIndex("OrderId", "SequenceNumber");

                    b.ToTable("RouteCheckpoints");
                });

            modelBuilder.Entity("RouteForce.Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(450)
                        .HasColumnType("INTEGER");

                    b.Property<int>("BusinessId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("Email");

                    b.HasIndex("Name");

                    b.HasIndex("UserRole");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RouteForce.Core.Models.WebhookToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("IssueType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("IssueType");

                    b.Property<DateTime?>("LastUsedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsageLimit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(1);

                    b.Property<int>("UsedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("ExpirationDate");

                    b.HasIndex("IsActive");

                    b.HasIndex("IssueType");

                    b.HasIndex("OrderId");

                    b.ToTable("WebhookTokens");
                });

            modelBuilder.Entity("RouteForce.Core.Models.Business", b =>
                {
                    b.OwnsOne("RouteForce.Core.Models.Address", "BusinessAddress", b1 =>
                        {
                            b1.Property<int>("BusinessId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("AddressLine")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("TEXT")
                                .HasColumnName("AddressLine");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("TEXT")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("TEXT")
                                .HasColumnName("Country");

                            b1.Property<decimal?>("Latitude")
                                .HasPrecision(9, 6)
                                .HasColumnType("TEXT")
                                .HasColumnName("Latitude");

                            b1.Property<decimal?>("Longitude")
                                .HasPrecision(9, 6)
                                .HasColumnType("TEXT")
                                .HasColumnName("Longitude");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("TEXT")
                                .HasColumnName("PostalCode");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("TEXT")
                                .HasColumnName("State");

                            b1.HasKey("BusinessId");

                            b1.ToTable("Businesses");

                            b1.WithOwner()
                                .HasForeignKey("BusinessId");
                        });

                    b.Navigation("BusinessAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("RouteForce.Core.Models.Checkpoint", b =>
                {
                    b.HasOne("RouteForce.Core.Models.DeliveryServiceTemplate", "DeliveryServiceTemplate")
                        .WithMany("ServiceCheckpoints")
                        .HasForeignKey("DeliveryServiceTemplateId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("RouteForce.Core.Models.Business", "ManagedByBusiness")
                        .WithMany("Warehouses")
                        .HasForeignKey("ManagedByBusinessId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("RouteForce.Core.Models.Address", "Address", b1 =>
                        {
                            b1.Property<int>("CheckpointId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("AddressLine")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("TEXT")
                                .HasColumnName("AddressLine");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("TEXT")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("TEXT")
                                .HasColumnName("Country");

                            b1.Property<decimal?>("Latitude")
                                .HasPrecision(9, 6)
                                .HasColumnType("TEXT")
                                .HasColumnName("Latitude");

                            b1.Property<decimal?>("Longitude")
                                .HasPrecision(9, 6)
                                .HasColumnType("TEXT")
                                .HasColumnName("Longitude");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("TEXT")
                                .HasColumnName("PostalCode");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("TEXT")
                                .HasColumnName("State");

                            b1.HasKey("CheckpointId");

                            b1.ToTable("Checkpoints");

                            b1.WithOwner()
                                .HasForeignKey("CheckpointId");
                        });

                    b.OwnsOne("RouteForce.Core.Models.ContactPoint", "ContactPoint", b1 =>
                        {
                            b1.Property<int>("CheckpointId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("TEXT")
                                .HasColumnName("ContactEmail");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("TEXT")
                                .HasColumnName("ContactName");

                            b1.Property<string>("Phone")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("TEXT")
                                .HasColumnName("ContactPhone");

                            b1.HasKey("CheckpointId");

                            b1.ToTable("Checkpoints");

                            b1.WithOwner()
                                .HasForeignKey("CheckpointId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("ContactPoint")
                        .IsRequired();

                    b.Navigation("DeliveryServiceTemplate");

                    b.Navigation("ManagedByBusiness");
                });

            modelBuilder.Entity("RouteForce.Core.Models.DeliveryAddress", b =>
                {
                    b.HasOne("RouteForce.Core.Models.PersonalReceiver", "PersonalReceiver")
                        .WithMany("SavedAddresses")
                        .HasForeignKey("PersonalReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("RouteForce.Core.Models.Address", "Address", b1 =>
                        {
                            b1.Property<int>("DeliveryAddressId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("AddressLine")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("TEXT")
                                .HasColumnName("AddressLine");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("TEXT")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("TEXT")
                                .HasColumnName("Country");

                            b1.Property<decimal?>("Latitude")
                                .HasPrecision(9, 6)
                                .HasColumnType("TEXT")
                                .HasColumnName("Latitude");

                            b1.Property<decimal?>("Longitude")
                                .HasPrecision(9, 6)
                                .HasColumnType("TEXT")
                                .HasColumnName("Longitude");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("TEXT")
                                .HasColumnName("PostalCode");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("TEXT")
                                .HasColumnName("State");

                            b1.HasKey("DeliveryAddressId");

                            b1.ToTable("DeliveryAddresses");

                            b1.WithOwner()
                                .HasForeignKey("DeliveryAddressId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("PersonalReceiver");
                });

            modelBuilder.Entity("RouteForce.Core.Models.Notification", b =>
                {
                    b.HasOne("RouteForce.Core.Models.Order", "Order")
                        .WithMany("Notifications")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("RouteForce.Core.Models.Order", b =>
                {
                    b.HasOne("RouteForce.Core.Models.Business", "Business")
                        .WithMany("Orders")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RouteForce.Core.Models.Checkpoint", "DeliveryCheckpoint")
                        .WithMany()
                        .HasForeignKey("DeliveryCheckpointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RouteForce.Core.Models.DeliveryServiceTemplate", "DeliveryServiceTemplate")
                        .WithMany("Orders")
                        .HasForeignKey("DeliveryServiceTemplateId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("RouteForce.Core.Models.PersonalReceiver", "PersonalReceiver")
                        .WithMany("Orders")
                        .HasForeignKey("PersonalReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RouteForce.Core.Models.DeliveryAddress", "SelectedDeliveryAddress")
                        .WithMany()
                        .HasForeignKey("SelectedDeliveryAddressId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsOne("RouteForce.Core.Models.Address", "DeliveryAddress", b1 =>
                        {
                            b1.Property<int>("OrderId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("AddressLine")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("TEXT")
                                .HasColumnName("DeliveryAddressLine");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("TEXT")
                                .HasColumnName("DeliveryCity");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("TEXT")
                                .HasColumnName("DeliveryCountry");

                            b1.Property<decimal?>("Latitude")
                                .HasPrecision(9, 6)
                                .HasColumnType("TEXT")
                                .HasColumnName("DeliveryLatitude");

                            b1.Property<decimal?>("Longitude")
                                .HasPrecision(9, 6)
                                .HasColumnType("TEXT")
                                .HasColumnName("DeliveryLongitude");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("TEXT")
                                .HasColumnName("DeliveryPostalCode");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("TEXT")
                                .HasColumnName("DeliveryState");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.Navigation("Business");

                    b.Navigation("DeliveryAddress")
                        .IsRequired();

                    b.Navigation("DeliveryCheckpoint");

                    b.Navigation("DeliveryServiceTemplate");

                    b.Navigation("PersonalReceiver");

                    b.Navigation("SelectedDeliveryAddress");
                });

            modelBuilder.Entity("RouteForce.Core.Models.PersonalReceiver", b =>
                {
                    b.HasOne("RouteForce.Core.Models.Business", "CreatedByBusiness")
                        .WithMany()
                        .HasForeignKey("CreatedByBusinessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByBusiness");
                });

            modelBuilder.Entity("RouteForce.Core.Models.RouteCheckpoint", b =>
                {
                    b.HasOne("RouteForce.Core.Models.Checkpoint", "Checkpoint")
                        .WithMany("RouteCheckpoints")
                        .HasForeignKey("CheckpointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RouteForce.Core.Models.WebhookToken", "ConfirmedByToken")
                        .WithMany()
                        .HasForeignKey("ConfirmedByTokenId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("RouteForce.Core.Models.Order", "Order")
                        .WithMany("RouteCheckpoints")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Checkpoint");

                    b.Navigation("ConfirmedByToken");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("RouteForce.Core.Models.User", b =>
                {
                    b.HasOne("RouteForce.Core.Models.Business", "Business")
                        .WithMany("Users")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("RouteForce.Core.Models.WebhookToken", b =>
                {
                    b.HasOne("RouteForce.Core.Models.Order", "Order")
                        .WithMany("WebhookTokens")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("RouteForce.Core.Models.Token", "Token", b1 =>
                        {
                            b1.Property<int>("WebhookTokenId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("IssuedToType")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("TEXT")
                                .HasColumnName("IssuedToType");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("TEXT")
                                .HasColumnName("TokenType");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("TEXT")
                                .HasColumnName("TokenValue");

                            b1.HasKey("WebhookTokenId");

                            b1.ToTable("WebhookTokens");

                            b1.WithOwner()
                                .HasForeignKey("WebhookTokenId");
                        });

                    b.Navigation("Order");

                    b.Navigation("Token")
                        .IsRequired();
                });

            modelBuilder.Entity("RouteForce.Core.Models.Business", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Users");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("RouteForce.Core.Models.Checkpoint", b =>
                {
                    b.Navigation("RouteCheckpoints");
                });

            modelBuilder.Entity("RouteForce.Core.Models.DeliveryServiceTemplate", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ServiceCheckpoints");
                });

            modelBuilder.Entity("RouteForce.Core.Models.Order", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("RouteCheckpoints");

                    b.Navigation("WebhookTokens");
                });

            modelBuilder.Entity("RouteForce.Core.Models.PersonalReceiver", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("SavedAddresses");
                });
#pragma warning restore 612, 618
        }
    }
}
